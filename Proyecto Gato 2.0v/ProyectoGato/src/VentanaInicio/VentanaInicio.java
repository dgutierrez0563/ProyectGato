/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VentanaInicio;

import RegistroJugadores.ListaJugadores;    //Importacion del paquete RegistroJugadores y la clase ListaJugadores
import java.awt.Color;      //Importacion de la libreria de color para usar en el JFrame
import java.util.Random;    //Libreria Random para utilizar en el sorteo
import javax.swing.JOptionPane; //Libreria del JOptionPane para impresiones
import Help.AboutGato;
import Help.ContactSupport;
/**
 * @author w.sullivan-DAVID GUTIERREZ SOLANO
 * @version Gato 1.8v
 * @create 2016-03-02
 */
public class VentanaInicio extends javax.swing.JFrame {
    //Atributos de la clase VentanaInicio  
    public boolean ganador;   //Variable para conocer si hay ganador  
    public boolean jugador1;    //Variable para el turno del jugador 1
    public boolean jugador2;    //Variable para el turno del jugador 2
    public boolean bloqueo;     //Variable para bloqueo abilitar sentencias en los botones
    public boolean bloqueoReinicio; //Variable para bloquear el reinicio
    public boolean empate;
    public boolean buckUp;      //Variable para validar los datos de respaldo
    public String auxiliarNombre1; //Variable para datos del jugador 1
    public String auxiliarNombre2; //Variable para datos del jugador 2
    public String nom1; //Variable para datos del jugador 1
    public String nom2; //Variable para datos del jugador 2
    public String [][] botones;   //Arraglo para guardar la informacion de los botones
    int count;  //Contador general de inscripciones
    int auxiliarGanes;  //Auxiliar para los ganes del juego
    int auxiliarPerdidas;//Auxiliar para las perdidas del juego
    int auxiliarEmpates;//Auxiliar para los empates del juego
    ListaJugadores registro = new ListaJugadores();   //Creacion del Objeto tipo ListaJugadores
    /**
     * Creates new form VentanaInicio
     */
    public VentanaInicio() {        
        initComponents();   //Inicio del proceso general del JFrame
        this.getContentPane().setBackground(Color.lightGray);   //Se establece el color de fondo del JFrame
        setLocationRelativeTo(null);    //Localizar JFrame en el centro
        botones=new String [3][3];
    } 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        btn_Sorteo = new javax.swing.JButton();
        lbl_JugadorPantalla = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JUEGO EL GATO");
        setFocusCycleRoot(false);
        setMinimumSize(new java.awt.Dimension(421, 550));
        setPreferredSize(new java.awt.Dimension(421, 550));
        setResizable(false);
        setSize(new java.awt.Dimension(421, 550));
        setType(java.awt.Window.Type.UTILITY);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/animated-cat-image-0001.gif"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 180, 160));

        jButton1.setBackground(new java.awt.Color(87, 227, 218));
        jButton1.setFont(new java.awt.Font("Ubuntu", 1, 26)); // NOI18N
        jButton1.setAutoscrolls(true);
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.setPreferredSize(new java.awt.Dimension(100, 100));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, 100, 90));

        jButton2.setBackground(new java.awt.Color(87, 227, 218));
        jButton2.setFont(new java.awt.Font("Ubuntu", 1, 26)); // NOI18N
        jButton2.setAutoscrolls(true);
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.setPreferredSize(new java.awt.Dimension(100, 100));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 180, 100, 90));

        jButton3.setBackground(new java.awt.Color(87, 227, 218));
        jButton3.setFont(new java.awt.Font("Ubuntu", 1, 26)); // NOI18N
        jButton3.setAutoscrolls(true);
        jButton3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.setPreferredSize(new java.awt.Dimension(100, 100));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 180, 100, 90));

        jButton4.setBackground(new java.awt.Color(87, 227, 218));
        jButton4.setFont(new java.awt.Font("Ubuntu", 1, 26)); // NOI18N
        jButton4.setAutoscrolls(true);
        jButton4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton4.setPreferredSize(new java.awt.Dimension(100, 100));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 270, 100, 90));

        jButton5.setBackground(new java.awt.Color(87, 227, 218));
        jButton5.setFont(new java.awt.Font("Ubuntu", 1, 26)); // NOI18N
        jButton5.setAutoscrolls(true);
        jButton5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton5.setPreferredSize(new java.awt.Dimension(100, 100));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 270, 100, 90));

        jButton6.setBackground(new java.awt.Color(87, 227, 218));
        jButton6.setFont(new java.awt.Font("Ubuntu", 1, 26)); // NOI18N
        jButton6.setAutoscrolls(true);
        jButton6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton6.setPreferredSize(new java.awt.Dimension(100, 100));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 270, 100, 90));

        jButton7.setBackground(new java.awt.Color(87, 227, 218));
        jButton7.setFont(new java.awt.Font("Ubuntu", 1, 26)); // NOI18N
        jButton7.setAutoscrolls(true);
        jButton7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton7.setPreferredSize(new java.awt.Dimension(100, 100));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 360, 100, 90));

        jButton8.setBackground(new java.awt.Color(87, 227, 218));
        jButton8.setFont(new java.awt.Font("Ubuntu", 1, 26)); // NOI18N
        jButton8.setAutoscrolls(true);
        jButton8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton8.setPreferredSize(new java.awt.Dimension(100, 100));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 360, 100, 90));

        jButton9.setBackground(new java.awt.Color(87, 227, 218));
        jButton9.setFont(new java.awt.Font("Ubuntu", 1, 26)); // NOI18N
        jButton9.setAutoscrolls(true);
        jButton9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton9.setPreferredSize(new java.awt.Dimension(100, 100));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 360, 100, 90));

        btn_Sorteo.setBackground(new java.awt.Color(224, 207, 207));
        btn_Sorteo.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N
        btn_Sorteo.setText("Sorteo");
        btn_Sorteo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_Sorteo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SorteoActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Sorteo, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 470, 100, 30));

        lbl_JugadorPantalla.setBackground(new java.awt.Color(132, 124, 116));
        lbl_JugadorPantalla.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        lbl_JugadorPantalla.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_JugadorPantalla.setText("Jugador Seleccionado");
        lbl_JugadorPantalla.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lbl_JugadorPantalla, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 50, 140, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Turno Siguiente");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 24, 140, 20));

        jMenu2.setText("Opciones");

        jMenuItem1.setText("Iniciar un Nuevo Juego");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem10.setText("Continuar Juego Anterior");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);

        jMenuItem2.setText("Eliminar Jugador");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem7.setText("Guardar Datos de Partida");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem3.setText("Revisar Lista de Jugadores");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem6.setText("Registro de Jugadores");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem4.setText("Ver Estadisticas del Juego");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Salir");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        jMenu1.setText("Ayuda");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem9.setText("Acerca del Juego");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem9);

        jMenuItem8.setText("Contactar Soporte");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Metodo vacio
     */
    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed
    /**
     * Metodo Btoton para salir del sistema completamente
     */
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Gracias Por Jugar 'El Gato'","Saliendo del Sistema",JOptionPane.INFORMATION_MESSAGE);  //Impresion de mensaje de salida del sistema
        System.exit(0); //Orden de Salida del Sistema
    }//GEN-LAST:event_jMenuItem5ActionPerformed
    /**
     * Metodo Btoton para el registro de los jugadores
     */
    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        registroJugadores();    //Llamada del metodo de registroJugadores
    }//GEN-LAST:event_jMenuItem6ActionPerformed
    /**
     * Metodo Btoton para el reinicio del juego
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        reiniciarJuego();   //Envia al metodo reiniciar el juego
    }//GEN-LAST:event_jMenuItem1ActionPerformed
   /**
     * Metodo Boton Item para mostrar lista de jugadores
     */
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        registro.verJugadores();    //Ver la lista de jugadores que han jugado
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    /**
     * Metodo Boton Item para mostrar las estadisticas de los jugadores
     */
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        registro.verEstadisticas();    //Solicitud de datos de estadisticas de los jugadores
    }//GEN-LAST:event_jMenuItem4ActionPerformed
    /**
     * Metodo Boton numero 3 del panel de juego
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (bloqueo == true) {  //Validacion si hay turno
            if (jugador1 == true) { //Condicion del jugador 1
                lbl_JugadorPantalla.setText(auxiliarNombre2);
                jButton3.setText("X");
                jugador1 = false;
                jugador2 = true;
            } else {  //Condicion del jugador 2
                lbl_JugadorPantalla.setText(auxiliarNombre1);
                jButton3.setText("O");
                jugador1 = true;
                jugador2 = false;
            }
            jButton3.setEnabled(false);
            comprobarCaracter();    //Comprobacion de datos
        } else {    //Sentencia si no hay turno
            JOptionPane.showMessageDialog(null, "lo sentimos aun no se ha sorteado el turno".toUpperCase(), "Error del sistema", JOptionPane.ERROR_MESSAGE); //Error del sistema donde no hay turno aun
        } 
    }//GEN-LAST:event_jButton3ActionPerformed
    /**
     * Metodo Boton numero 1 del panel de juego
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
      if (bloqueo == true) {  //Validacion si hay turno
            if (jugador1 == true) { //Condicion del jugador 1
                lbl_JugadorPantalla.setText(auxiliarNombre2);
                jButton1.setText("X");
                jugador1 = false;
                jugador2 = true;
            } else {  //Condicion del jugador 2
                lbl_JugadorPantalla.setText(auxiliarNombre1);
                jButton1.setText("O");
                jugador1 = true;
                jugador2 = false;
            }
            jButton1.setEnabled(false);
            comprobarCaracter();    //Comprobacion de datos
        } else {    //Sentencia si no hay turno
            JOptionPane.showMessageDialog(null, "lo sentimos aun no se ha sorteado el turno".toUpperCase(), "Error del sistema", JOptionPane.ERROR_MESSAGE); //Error del sistema donde no hay turno aun
        }  
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * Metodo Boton numero 2 del panel de juego
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (bloqueo == true) {  //Validacion si hay turno
            if (jugador1 == true) { //Condicion del jugador 1
                lbl_JugadorPantalla.setText(auxiliarNombre2);
                jButton2.setText("X");
                jugador1 = false;
                jugador2 = true;
            } else {  //Condicion del jugador 2
                lbl_JugadorPantalla.setText(auxiliarNombre1);
                jButton2.setText("O");
                jugador1 = true;
                jugador2 = false;
            }
            jButton2.setEnabled(false);
            comprobarCaracter();    //Comprobacion de datos
        } else {    //Sentencia si no hay turno
            JOptionPane.showMessageDialog(null, "lo sentimos aun no se ha sorteado el turno".toUpperCase(), "Error del sistema", JOptionPane.ERROR_MESSAGE); //Error del sistema donde no hay turno aun
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    /**
     * Metodo Boton numero 6 del panel de juego
     */
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        if (bloqueo == true) {  //Validacion si hay turno
            if (jugador1 == true) { //Condicion del jugador 1
                lbl_JugadorPantalla.setText(auxiliarNombre2);
                jButton6.setText("X");
                jugador1 = false;
                jugador2 = true;
            } else {  //Condicion del jugador 2
                lbl_JugadorPantalla.setText(auxiliarNombre1);
                jButton6.setText("O");
                jugador1 = true;
                jugador2 = false;
            }
            jButton6.setEnabled(false);
            comprobarCaracter();    //Comprobacion de datos
        } else {    //Sentencia si no hay turno
            JOptionPane.showMessageDialog(null, "lo sentimos aun no se ha sorteado el turno".toUpperCase(), "Error del sistema", JOptionPane.ERROR_MESSAGE); //Error del sistema donde no hay turno aun
        }  
    }//GEN-LAST:event_jButton6ActionPerformed
   /**
     * Metodo Boton numero 4 del panel de juego
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if (bloqueo == true) {  //Validacion si hay turno
            if (jugador1 == true) { //Condicion del jugador 1
                lbl_JugadorPantalla.setText(auxiliarNombre2);
                jButton4.setText("X");
                jugador1 = false;
                jugador2 = true;
            } else {  //Condicion del jugador 2
                lbl_JugadorPantalla.setText(auxiliarNombre1);
                jButton4.setText("O");
                jugador1 = true;
                jugador2 = false;
            }
            jButton4.setEnabled(false);
            comprobarCaracter();    //Comprobacion de datos
        } else {    //Sentencia si no hay turno
            JOptionPane.showMessageDialog(null, "lo sentimos aun no se ha sorteado el turno".toUpperCase(), "Error del sistema", JOptionPane.ERROR_MESSAGE); //Error del sistema donde no hay turno aun
        }  
    }//GEN-LAST:event_jButton4ActionPerformed
   /**
     * Metodo Boton numero 5 del panel de juego
     */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        if (bloqueo == true) {  //Validacion si hay turno
            if (jugador1 == true) { //Condicion del jugador 1
                lbl_JugadorPantalla.setText(auxiliarNombre2);
                jButton5.setText("X");
                jugador1 = false;
                jugador2 = true;
            } else {  //Condicion del jugador 2
                lbl_JugadorPantalla.setText(auxiliarNombre1);
                jButton5.setText("O");
                jugador1 = true;
                jugador2 = false;
            }
            jButton5.setEnabled(false);
            comprobarCaracter();    //Comprobacion de datos
        } else {    //Sentencia si no hay turno
            JOptionPane.showMessageDialog(null, "lo sentimos aun no se ha sorteado el turno".toUpperCase(), "Error del sistema", JOptionPane.ERROR_MESSAGE); //Error del sistema donde no hay turno aun
        } 
    }//GEN-LAST:event_jButton5ActionPerformed
    /**
     * Metodo Boton numero 9 del panel de juego
     */
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        if (bloqueo == true) {  //Validacion si hay turno
            if (jugador1 == true) { //Condicion del jugador 1
                lbl_JugadorPantalla.setText(auxiliarNombre2);
                jButton9.setText("X");
                jugador1 = false;
                jugador2 = true;
            } else {  //Condicion del jugador 2
                lbl_JugadorPantalla.setText(auxiliarNombre1);
                jButton9.setText("O");
                jugador1 = true;
                jugador2 = false;
            }
            jButton9.setEnabled(false);
            comprobarCaracter();    //Comprobacion de datos
        } else {    //Sentencia si no hay turno
            JOptionPane.showMessageDialog(null, "lo sentimos aun no se ha sorteado el turno".toUpperCase(), "Error del sistema", JOptionPane.ERROR_MESSAGE); //Error del sistema donde no hay turno aun
        } 
    }//GEN-LAST:event_jButton9ActionPerformed
    /**
     * Metodo Boton numero 7 del panel de juego
     */
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
       if (bloqueo == true) {  //Validacion si hay turno
            if (jugador1 == true) { //Condicion del jugador 1
                lbl_JugadorPantalla.setText(auxiliarNombre2);
                jButton7.setText("X");
                jugador1 = false;
                jugador2 = true;
            } else {  //Condicion del jugador 2
                lbl_JugadorPantalla.setText(auxiliarNombre1);
                jButton7.setText("O");
                jugador1 = true;
                jugador2 = false;
            }
            jButton7.setEnabled(false);
            comprobarCaracter();    //Comprobacion de datos
        } else {    //Sentencia si no hay turno
            JOptionPane.showMessageDialog(null, "lo sentimos aun no se ha sorteado el turno".toUpperCase(), "Error del sistema", JOptionPane.ERROR_MESSAGE); //Error del sistema donde no hay turno aun
        }  
    }//GEN-LAST:event_jButton7ActionPerformed
    /**
     * Metodo Boton numero 8 del panel de juego
     */
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
       if (bloqueo == true) {  //Validacion si hay turno
            if (jugador1 == true) { //Condicion del jugador 1
                lbl_JugadorPantalla.setText(auxiliarNombre2);
                jButton8.setText("X");
                jugador1 = false;
                jugador2 = true;
            } else {  //Condicion del jugador 2
                lbl_JugadorPantalla.setText(auxiliarNombre1);
                jButton8.setText("O");
                jugador1 = true;
                jugador2 = false;
            }
            jButton8.setEnabled(false);
            comprobarCaracter();    //Comprobacion de datos
        } else {    //Sentencia si no hay turno
            JOptionPane.showMessageDialog(null, "lo sentimos aun no se ha sorteado el turno".toUpperCase(), "Error del sistema", JOptionPane.ERROR_MESSAGE); //Error del sistema donde no hay turno aun
        }  
    }//GEN-LAST:event_jButton8ActionPerformed
    /**
     * Metodo Bonton para el sorteo del jugador que inicia el juego
     */
    private void btn_SorteoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SorteoActionPerformed
        // TODO add your handling code here:
        if ((auxiliarNombre1==null) || (auxiliarNombre2==null)) {
            JOptionPane.showMessageDialog(null, "lo sentimos aun no se han registrado jugadores".toUpperCase(), "Error del sistema", JOptionPane.ERROR_MESSAGE); //Error del sistema donde no hay turno aun
        } else {
            Random auxiliar = new Random(); //Objeto Random
            int mayor = auxiliar.nextInt(6) + 1;   //Calculo de numero aleatorio
            if (mayor >= 3) {  //Condicion
                jugador1 = true;  //Asignar valor a jugador 1
                jugador2 = false; //Asignar valor a jugador 2
                lbl_JugadorPantalla.setText(auxiliarNombre1);
            } else {
                jugador2 = true;  //Asignar valor a jugador 1
                jugador1 = false; //Asignar valor a jugador 2
                lbl_JugadorPantalla.setText(auxiliarNombre2);
            }
            btn_Sorteo.setEnabled(false); //Se desactiva el boton de sorteo
            bloqueo = true;
        }  
    }//GEN-LAST:event_btn_SorteoActionPerformed
    /**
     * Metodo Bonton para guardar datos
     */
    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        guardarPartida();
    }//GEN-LAST:event_jMenuItem7ActionPerformed
    /**
     * Metodo llamada a coporte
     */
    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        ContactSupport instanciaContactSupport=new ContactSupport(this,true);   //Creacion de objeto instanciaContactSupport
        instanciaContactSupport.pack(); //Se instancia el paquete
        instanciaContactSupport.setVisible(true);   //Se instancia el metodo en true para mostrar el jFrame
    }//GEN-LAST:event_jMenuItem8ActionPerformed
    /**
     * Metodo llamada a las referencias
     */
    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        AboutGato instanciaAboutGato=new AboutGato(this,true);    //Creacion de objeto instancia
        instanciaAboutGato.pack();    //Se instancia el paquete
        instanciaAboutGato.setVisible(true);  //Se instancia el metodo en true para mostrar el jFrame
    }//GEN-LAST:event_jMenuItem9ActionPerformed
    /**
     * Metodo Boton para continuar juego guardado
     */
    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        desbloquearPaneles();
        btn_Sorteo.setEnabled(true);
        auxiliarNombre1=nom1;
        auxiliarNombre2=nom2;
        jButton1.setText(botones[0][0]);   //Carga datos del boton en el indice
        jButton2.setText(botones[1][0]);   //Carga datos del boton en el indice
        jButton3.setText(botones[2][0]);   //Carga datos del boton en el indice
        jButton4.setText(botones[0][1]);   //Carga datos del boton en el indice
        jButton5.setText(botones[1][1]);   //Carga datos del boton en el indice
        jButton6.setText(botones[2][1]);   //Carga datos del boton en el indice
        jButton7.setText(botones[0][2]);   //Carga datos del boton en el indice
        jButton8.setText(botones[1][2]);   //Carga datos del boton en el indice
        jButton9.setText(botones[2][2]);   //Carga datos del boton en el indice
        buckUp = false;
    }//GEN-LAST:event_jMenuItem10ActionPerformed
    /**
     * Metodo para buscart y eliminar un jugador no deseado
     */
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        String nombre=JOptionPane.showInputDialog(null, "Ingrese el nombre del Jugador a Eliminar ", "Registro del Jugadores", JOptionPane.INFORMATION_MESSAGE); //Solicitud de registro del jugador 1
        if("".equals(nombre)){
            JOptionPane.showMessageDialog(null,"No se ha encontrado el nombre--> ".toUpperCase()+nombre,"GANADOR",JOptionPane.ERROR_MESSAGE);
        }else{
            registro.eliminaNodoBuscado(nombre);
        }       
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * Metodo que valida las opciones del juego durante el proceso del juego
     */
    public void comprobarCaracter(){
        //Creacion de todas las sentecias para la validacion de las opciones del ganador
        //Validacion de botones 1,2,3
        if(jButton1.getText().equals("X")&&jButton2.getText().equals("X")&&jButton3.getText().equals("X")){     
            ganador=true;
            //Impreson de datos del ganador
            JOptionPane.showMessageDialog(null,"felicidades ganaste la partida ".toUpperCase()+auxiliarNombre1,"GANADOR",JOptionPane.INFORMATION_MESSAGE);
            registro.actualizaNodoGana(auxiliarNombre1); //Actualizacion de ganes
            registro.actualizaNodoPierde(auxiliarNombre2); //Actualizacion de perdidas
            bloquearPaneles();
            empate=false;
        }
        //Validacion de botones 1,5,9
        else if(jButton1.getText().equals("X")&&jButton5.getText().equals("X")&&jButton9.getText().equals("X")){
            ganador=true;
            //Impreson de datos del ganador
            JOptionPane.showMessageDialog(null,"felicidades ganaste la partida ".toUpperCase()+auxiliarNombre1,"GANADOR",JOptionPane.INFORMATION_MESSAGE);
            registro.actualizaNodoGana(auxiliarNombre1); //Actualizacion de ganes
            //registro.actualizaNodoPierde(auxiliarNombre2); //Actualizacion de perdidas
            bloquearPaneles();
            empate=false;
        }
        //Validacion de botones 1,4,7
        else if(jButton1.getText().equals("X")&&jButton4.getText().equals("X")&&jButton7.getText().equals("X")){
            ganador=true;
            //Impreson de datos del ganador
            JOptionPane.showMessageDialog(null,"felicidades ganaste la partida ".toUpperCase()+auxiliarNombre1,"GANADOR",JOptionPane.INFORMATION_MESSAGE);
            registro.actualizaNodoGana(auxiliarNombre1); //Actualizacion de ganes
            //registro.actualizaNodoPierde(auxiliarNombre2); //Actualizacion de perdidas
            bloquearPaneles();
            empate=false;
        }
        //Validacion de botones 2,5,8
        else if(jButton2.getText().equals("X")&&jButton5.getText().equals("X")&&jButton8.getText().equals("X")){
            ganador=true;
            //Impreson de datos del ganador
            JOptionPane.showMessageDialog(null,"felicidades ganaste la partida ".toUpperCase()+auxiliarNombre1,"GANADOR",JOptionPane.INFORMATION_MESSAGE);
            registro.actualizaNodoGana(auxiliarNombre1); //Actualizacion de ganes
            //registro.actualizaNodoPierde(auxiliarNombre2); //Actualizacion de perdidas
            bloquearPaneles();
            empate=false;
        }
        //Validacion de botones 4,5,6
        else if(jButton4.getText().equals("X")&&jButton5.getText().equals("X")&&jButton6.getText().equals("X")){
            ganador=true;
            //Impreson de datos del ganador
            JOptionPane.showMessageDialog(null,"felicidades ganaste la partida ".toUpperCase()+auxiliarNombre1,"GANADOR",JOptionPane.INFORMATION_MESSAGE);
            registro.actualizaNodoGana(auxiliarNombre1); //Actualizacion de ganes
            //registro.actualizaNodoPierde(auxiliarNombre2); //Actualizacion de perdidas
            bloquearPaneles();
            empate=false;
        }
        //Validacion de botones 3,6,9
        else if(jButton3.getText().equals("X")&&jButton6.getText().equals("X")&&jButton9.getText().equals("X")){
            ganador=true;
            //Impreson de datos del ganador
            JOptionPane.showMessageDialog(null,"felicidades ganaste la partida ".toUpperCase()+auxiliarNombre1,"GANADOR",JOptionPane.INFORMATION_MESSAGE);
            registro.actualizaNodoGana(auxiliarNombre1); //Actualizacion de ganes
            //registro.actualizaNodoPierde(auxiliarNombre2); //Actualizacion de perdidas
            bloquearPaneles();
            empate=false;
        }
        
        //Validacion de botones 7,8,9
        else if(jButton7.getText().equals("X")&&jButton8.getText().equals("X")&&jButton9.getText().equals("X")){
            ganador=true;
            //Impreson de datos del ganador
            JOptionPane.showMessageDialog(null,"felicidades ganaste la partida ".toUpperCase()+auxiliarNombre1,"GANADOR",JOptionPane.INFORMATION_MESSAGE);
            registro.actualizaNodoGana(auxiliarNombre1); //Actualizacion de ganes
            //registro.actualizaNodoPierde(auxiliarNombre2); //Actualizacion de perdidas
            bloquearPaneles();
            empate=false;
        }
        //Validacion de botones 1,2,3
        else if(jButton1.getText().equals("O")&&jButton2.getText().equals("O")&&jButton3.getText().equals("O")){
            ganador=true;
            //Impreson de datos del ganador
            JOptionPane.showMessageDialog(null,"felicidades ganaste la partida ".toUpperCase()+auxiliarNombre2,"GANADOR",JOptionPane.INFORMATION_MESSAGE);
            registro.actualizaNodoGana(auxiliarNombre2); //Actualizacion de ganes
            //registro.actualizaNodoPierde(auxiliarNombre1); //Actualizacion de perdidas
            bloquearPaneles();
            empate=false;
        }          
        //Validacion de botones 1,5,9
        else if(jButton1.getText().equals("O")&&jButton5.getText().equals("O")&&jButton9.getText().equals("O")){
            ganador=true;
            //Impreson de datos del ganador
            JOptionPane.showMessageDialog(null,"felicidades ganaste la partida ".toUpperCase()+auxiliarNombre2,"GANADOR",JOptionPane.INFORMATION_MESSAGE);
            registro.actualizaNodoGana(auxiliarNombre2); //Actualizacion de ganes
            //registro.actualizaNodoPierde(auxiliarNombre1); //Actualizacion de perdidas
            bloquearPaneles();
            empate=false;
        }
        //Validacion de botones 1,4,7
        else if(jButton1.getText().equals("O")&&jButton4.getText().equals("O")&&jButton7.getText().equals("O")){
            ganador=true;
            //Impreson de datos del ganador
            JOptionPane.showMessageDialog(null,"felicidades ganaste la partida ".toUpperCase()+auxiliarNombre2,"GANADOR",JOptionPane.INFORMATION_MESSAGE);
            registro.actualizaNodoGana(auxiliarNombre2); //Actualizacion de ganes
            //registro.actualizaNodoPierde(auxiliarNombre1); //Actualizacion de perdidas
            bloquearPaneles();
            empate=false;
        }
        //Validacion de botones 2,5,8
        else if(jButton2.getText().equals("O")&&jButton5.getText().equals("O")&&jButton8.getText().equals("O")){
            ganador=true;
            //Impreson de datos del ganador
            JOptionPane.showMessageDialog(null,"felicidades ganaste la partida ".toUpperCase()+auxiliarNombre2,"GANADOR",JOptionPane.INFORMATION_MESSAGE);
            registro.actualizaNodoGana(auxiliarNombre2); //Actualizacion de ganes
            //registro.actualizaNodoPierde(auxiliarNombre1); //Actualizacion de perdidas
            bloquearPaneles();
            empate=false;
        }
        //Validacion de botones 4,5,6
        else if(jButton4.getText().equals("O")&&jButton5.getText().equals("O")&&jButton6.getText().equals("O")){
            ganador=true;
            //Impreson de datos del ganador
            JOptionPane.showMessageDialog(null,"felicidades ganaste la partida ".toUpperCase()+auxiliarNombre2,"GANADOR",JOptionPane.INFORMATION_MESSAGE);
            registro.actualizaNodoGana(auxiliarNombre2); //Actualizacion de ganes
            //registro.actualizaNodoPierde(auxiliarNombre1); //Actualizacion de perdidas
            bloquearPaneles();
            empate=false;
        }
        //Validacion de botones 3,6,9
        else if(jButton3.getText().equals("O")&&jButton6.getText().equals("O")&&jButton9.getText().equals("O")){
            ganador=true;
            //Impreson de datos del ganador
            JOptionPane.showMessageDialog(null,"felicidades ganaste la partida ".toUpperCase()+auxiliarNombre2,"GANADOR",JOptionPane.INFORMATION_MESSAGE);
            registro.actualizaNodoGana(auxiliarNombre2); //Actualizacion de ganes
           // registro.actualizaNodoPierde(auxiliarNombre1); //Actualizacion de perdidas
            bloquearPaneles();
            empate=false;
        }
        //Validacion de botones 7,8,9
        else if(jButton7.getText().equals("O")&&jButton8.getText().equals("O")&&jButton9.getText().equals("O")){
            ganador=true;
            //Impreson de datos del ganador
            JOptionPane.showMessageDialog(null,"felicidades ganaste la partida ".toUpperCase()+auxiliarNombre2,"GANADOR",JOptionPane.INFORMATION_MESSAGE);
            registro.actualizaNodoGana(auxiliarNombre2); //Actualizacion de ganes
            //registro.actualizaNodoPierde(auxiliarNombre1); //Actualizacion de perdidas
            bloquearPaneles();
            empate=false;
        }
    }
    /**
     * Metodo para guardar la partida
     */
    public void guardarPartida(){
        //Guardado de datos de los botones en los indices del arreglo
        try {
            //buckUp = false;
            nom1 = auxiliarNombre1;
            nom2 = auxiliarNombre2;
            auxiliarNombre1 = null;
            auxiliarNombre2 = null;
            botones[0][0] = jButton1.getText();   //Guarda datos del boton en el indice
            botones[1][0] = jButton2.getText();   //Guarda datos del boton en el indice
            botones[2][0] = jButton3.getText();   //Guarda datos del boton en el indice
            botones[0][1] = jButton4.getText();   //Guarda datos del boton en el indice
            botones[1][1] = jButton5.getText();   //Guarda datos del boton en el indice
            botones[2][1] = jButton6.getText();   //Guarda datos del boton en el indice
            botones[0][2] = jButton7.getText();   //Guarda datos del boton en el indice
            botones[1][2] = jButton8.getText();   //Guarda datos del boton en el indice
            botones[2][2] = jButton9.getText();   //Guarda datos del boton en el indice
            buckUp = true;
            //Se muestra mensaje en pantalla del proceso satisfcatorio BUCKUP
            JOptionPane.showMessageDialog(null, "Los datos se han guardado satisfactoriamente", "Mensaje del Sistema", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {   //Exception por si ocurre algun problema
            //Se muestra en pantalla el problem ocurrido
            JOptionPane.showMessageDialog(null, "Error " + e.getMessage(), "Error del Sistema", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * Metodo para bloquear todas las funciones del juego
     */
    public void bloquearPaneles() {
        //Bloqueo de funciones del los botones del juego
        btn_Sorteo.setEnabled(false);
        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
        jButton4.setEnabled(false);
        jButton5.setEnabled(false);
        jButton6.setEnabled(false);
        jButton7.setEnabled(false);
        jButton8.setEnabled(false);
        jButton9.setEnabled(false);
    }
    
    /**
     * Metodo para desbloquear el juego
     */
    public void desbloquearPaneles() {
        //Bloqueo de funciones del los botones del juego
        jButton1.setEnabled(true);
        jButton2.setEnabled(true);
        jButton3.setEnabled(true);
        jButton4.setEnabled(true);
        jButton5.setEnabled(true);
        jButton6.setEnabled(true);
        jButton7.setEnabled(true);
        jButton8.setEnabled(true);
        jButton9.setEnabled(true);
    }
      /**
     * Metodo para reiniciar la partida del juego
     */
    public void reiniciarJuego() {
             //Se limpian todos los datos de los botones para ser utilizados nuevamente
            auxiliarNombre1 = null;
            auxiliarNombre2 = null;
            lbl_JugadorPantalla.setText("");
            btn_Sorteo.setEnabled(true);
            jButton1.setEnabled(true);
            jButton1.setText("");
            jButton2.setEnabled(true);
            jButton2.setText("");
            jButton3.setEnabled(true);
            jButton3.setText("");
            jButton4.setEnabled(true);
            jButton4.setText("");
            jButton5.setEnabled(true);
            jButton5.setText("");
            jButton6.setEnabled(true);
            jButton6.setText("");
            jButton7.setEnabled(true);
            jButton7.setText("");
            jButton8.setEnabled(true);
            jButton8.setText("");
            jButton9.setEnabled(true);
            jButton9.setText("");
    }   
    /**
     * Metodo para registrar los jugadores del Juego
     */
    public void registroJugadores() {
        //Solicitud de los datos para los jugadores 1 y 2
        auxiliarNombre1 = JOptionPane.showInputDialog(null, "Ingrese el nombre del Jugador 1 ", "Registro del Jugadores", JOptionPane.INFORMATION_MESSAGE); //Solicitud de registro del jugador 1
        auxiliarNombre2 = JOptionPane.showInputDialog(null, "Ingrese el nombre del Jugador 2 ", "Registro del Jugadores", JOptionPane.INFORMATION_MESSAGE); //Solicitud de registro del jugador 2
        try{
            if ((auxiliarNombre1.equals("")) || (auxiliarNombre2.equals(""))) { //Validacion de los campos
                JOptionPane.showMessageDialog(null, "Error, no se han guardado correctamente los datos" + "\n\nJugador 1: " + auxiliarNombre1 + "\nJugador 2: " + auxiliarNombre2, "Error del Sistema", JOptionPane.ERROR_MESSAGE);
                auxiliarNombre1=null;
                auxiliarNombre2=null;
            } else {   //Sentencia si no es vacio
                count++;    //Contador
                 //Inscripcion el jugador 1
                registro.insertar(count, auxiliarNombre1, auxiliarGanes, auxiliarPerdidas, auxiliarEmpates);  
                count++;    //Contador
                 //Inscripcion el jugador 2
                registro.insertar(count, auxiliarNombre2, auxiliarGanes, auxiliarPerdidas, auxiliarEmpates); 
                bloqueoReinicio=true;
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "ERROR\n"+e.getMessage(), "Error del Sistema", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaInicio().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Sorteo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JLabel lbl_JugadorPantalla;
    // End of variables declaration//GEN-END:variables
}
